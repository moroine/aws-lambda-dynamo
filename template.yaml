AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-lambda-dynamo

  Sample SAM Template for aws-lambda-dynamo

Globals:
  Function:
    Timeout: 3

Resources:

  DynamoDBTableResource:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'aws-lambda-dynamo-table-resource'
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: resourceName
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: RANGE
      - AttributeName: resourceId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DynamoDBTableToken:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'aws-lambda-dynamo-table-token'
      AttributeDefinitions:
      - AttributeName: token
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: token
        KeyType: HASH
      - AttributeName: userId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: Boolean

  DynamoDBTableUser:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'aws-lambda-dynamo-table-user'
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ListResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.listResource
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBReadOnlyAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        ListResource:
          Type: Api
          Properties:
            Path: /resource/{userId}
            Method: get

  PostResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.postResource
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /resource/{userId}
            Method: post

  DeleteResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.deleteResource
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        DeleteResource:
          Type: Api
          Properties:
            Path: /resource/{userId}/{resourceId}
            Method: delete

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.getUser
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        GetUer:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: get

  ListUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.listUser
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        ListUser:
          Type: Api
          Properties:
            Path: /user
            Method: get

  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.postUser
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /user
            Method: post

  PatchUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.patchUser
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        PutUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: patch

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: index.deleteUser
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_RESOURCE: 'aws-lambda-dynamo-table-resource'
          TABLE_USER: 'aws-lambda-dynamo-table-user'
          TABLE_TOKEN: 'aws-lambda-dynamo-table-token'
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: delete

Outputs:

  Api:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/"
